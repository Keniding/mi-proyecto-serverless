import { APIGatewayProxyHandler } from "aws-lambda";
import middy from '@middy/core';
import httpJsonBodyParser from '@middy/http-json-body-parser';
import httpErrorHandler from '@middy/http-error-handler';
import cors from '@middy/http-cors';
import { ItemService } from "../services/itemService";
import { MySQLItemRepository } from "../repositories/itemRepository";
import { Item } from "../models/item";
import pool from "../libs/db";
import { success, badRequest, notFound, serverError, tooManyRequests } from "../libs/apiResponses";
import { ValidationError, NotFoundError, DatabaseError } from "../utils/errors";
import { logger } from "../utils/logger";
import { InMemoryRateLimit } from '../middleware/rateLimiter';
import { validateUpdateItem } from "../validators/itemValidator";

const repository = new MySQLItemRepository(pool);
const service = new ItemService(repository);

const rateLimiter = new InMemoryRateLimit({
	windowMs: 60 * 1000, // 1 minuto
	max: 10 // 10 solicitudes por minuto
});

const baseHandler: APIGatewayProxyHandler = async (event) => {
	try {
		try {
			await rateLimiter.check(event);
		} catch (error: any) {
			return tooManyRequests(error.message);
		}

		const id = event.pathParameters?.id;
		if (!id || isNaN(Number(id))) {
			return badRequest("ID no válido o no proporcionado");
		}

		if (!event.body) {
			return badRequest("No se proporcionó un cuerpo en la solicitud");
		}

		try {
			const itemUpdate = validateUpdateItem(event.body);

			const result = await service.updateItem(Number(id), itemUpdate);

			logger.info(`Item actualizado exitosamente`, {
				itemId: id,
				fields: Object.keys(itemUpdate)
			});

			return success({
				id: Number(id),
				...itemUpdate,
				affectedRows: result.affectedRows,
				message: "Item actualizado exitosamente"
			});
		} catch (error) {
			if (error instanceof ValidationError) {
				return badRequest(error.message);
			}

			if (error instanceof NotFoundError) {
				return notFound(error.message);
			}

			throw error;
		}
	} catch (error) {
		logger.error('Error en handler de actualización de item:', error);

		if (error instanceof DatabaseError) {
			return serverError(error.message);
		}

		return serverError("Error al procesar la solicitud");
	}
};

export const handler = middy(baseHandler)
	.use(httpJsonBodyParser())
	.use(cors())
	.use(httpErrorHandler());
